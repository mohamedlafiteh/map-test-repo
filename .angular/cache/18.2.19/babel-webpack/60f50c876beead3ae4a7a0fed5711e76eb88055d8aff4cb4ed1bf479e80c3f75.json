{"ast":null,"code":"import * as L from 'leaflet';\nimport * as Papa from 'papaparse';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction MapComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(type_r1);\n  }\n}\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor() {\n      this.sentimentType = 'RandomValue';\n      this.sentimentOptions = ['RandomValue', 'Second', 'Third', 'Fourth'];\n      this.sentimentMap = {};\n      this.sentimentRawData = [];\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.loadCSVData();\n    }\n    loadCSVData() {\n      Papa.parse('/assets/data/geo_sentiments.csv', {\n        download: true,\n        header: true,\n        complete: result => {\n          this.sentimentRawData = result.data;\n          this.updateSentimentMap();\n          this.initMap();\n        }\n      });\n    }\n    updateSentimentMap() {\n      this.sentimentMap = {};\n      for (const row of this.sentimentRawData) {\n        const region = row.Region?.trim();\n        const value = row[this.sentimentType];\n        if (region && value !== undefined && !isNaN(parseInt(value))) {\n          this.sentimentMap[region] = parseInt(value);\n        }\n      }\n    }\n    onSentimentTypeChange() {\n      this.updateSentimentMap();\n      this.initMap();\n    }\n    getRegionSentimentBreakdown(region) {\n      const entry = this.sentimentRawData.find(r => r.Region?.trim() === region);\n      if (!entry) return 'No data available.';\n      let breakdown = '';\n      for (const key of this.sentimentOptions) {\n        if (entry[key] !== undefined && entry[key] !== '') {\n          breakdown += `<div><strong>${key}:</strong> ${entry[key]}</div>`;\n        }\n      }\n      return breakdown;\n    }\n    initMap() {\n      if (this.map) {\n        this.map.remove();\n      }\n      this.map = L.map('map', {\n        center: [37.8, -96],\n        zoom: 4\n      });\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 18,\n        attribution: '&copy; OpenStreetMap contributors'\n      }).addTo(this.map);\n      fetch('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json').then(res => res.json()).then(geojson => {\n        L.geoJSON(geojson, {\n          style: feature => {\n            const state = feature.properties.name;\n            const value = this.sentimentMap[state] ?? -1;\n            return {\n              color: 'black',\n              weight: 1,\n              fillColor: this.colorBySentiment(value),\n              fillOpacity: 0.6\n            };\n          },\n          onEachFeature: (feature, layer) => {\n            const state = feature.properties.name;\n            const value = this.sentimentMap[state];\n            let label = 'Unknown';\n            if (value === 0) label = 'Negative';\n            if (value === 1) label = 'Neutral';\n            if (value === 2) label = 'Positive';\n            layer.bindPopup(`${state} - ${label}`);\n            layer.on('mouseover', function () {\n              this.openPopup();\n            });\n            layer.on('mouseout', function () {\n              this.closePopup();\n            });\n            layer.on('click', () => {\n              const breakdown = this.getRegionSentimentBreakdown(state);\n              layer.bindPopup(`<strong>${state}</strong><br>${breakdown}`).openPopup();\n            });\n          }\n        }).addTo(this.map);\n      });\n    }\n    colorBySentiment(value) {\n      switch (value) {\n        case 0:\n          return 'red';\n        case 1:\n          return 'yellow';\n        case 2:\n          return 'green';\n        default:\n          return 'gray';\n      }\n    }\n    static {\n      this.ɵfac = function MapComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || MapComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapComponent,\n        selectors: [[\"app-map\"]],\n        decls: 9,\n        vars: 2,\n        consts: [[1, \"map-container\"], [1, \"map-title\"], [1, \"controls\"], [\"for\", \"sentimentType\"], [\"id\", \"sentimentType\", 3, \"ngModelChange\", \"change\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"map\", 1, \"map-view\"], [3, \"value\"]],\n        template: function MapComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n            i0.ɵɵtext(2, \"Sentiment Map\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2)(4, \"label\", 3);\n            i0.ɵɵtext(5, \"Select Sentiment Type:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"select\", 4);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function MapComponent_Template_select_ngModelChange_6_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.sentimentType, $event) || (ctx.sentimentType = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"change\", function MapComponent_Template_select_change_6_listener() {\n              return ctx.onSentimentTypeChange();\n            });\n            i0.ɵɵtemplate(7, MapComponent_option_7_Template, 2, 2, \"option\", 5);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(8, \"div\", 6);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(6);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.sentimentType);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.sentimentOptions);\n          }\n        },\n        dependencies: [i1.NgForOf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n        styles: [\".map-container[_ngcontent-%COMP%]{text-align:center;max-width:1000px;margin:0 auto;padding:20px}.map-title[_ngcontent-%COMP%]{font-size:28px;font-weight:700;margin-bottom:15px;color:#2c3e50}.controls[_ngcontent-%COMP%]{margin-bottom:20px;font-size:16px}.controls[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-right:10px;font-weight:500}.controls[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{padding:6px 12px;font-size:15px;border:1px solid #ccc;border-radius:6px;outline:none}.map-view[_ngcontent-%COMP%]{height:600px;border:1px solid #ddd;border-radius:8px;overflow:hidden}\"]\n      });\n    }\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}